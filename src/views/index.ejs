<!DOCTYPE html>
<html lang="en" data-theme="dark">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AQI Monitor</title>
  <link href="https://cdn.jsdelivr.net/npm/daisyui@4.12.24/dist/full.min.css" rel="stylesheet" type="text/css" />
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    /* Hide scrollbar for Chrome, Safari and Opera */
    *::-webkit-scrollbar {
      display: none;
    }

    /* Hide scrollbar for IE, Edge and Firefox */
    * {
      -ms-overflow-style: none;
      /* IE and Edge */
      scrollbar-width: none;
      /* Firefox */
    }
  </style>
</head>

<body class="bg-base-300 font-sans">
  <div id="app" class="min-h-screen">
    <div class="navbar bg-base-100 shadow-lg mb-4">
      <div class="container mx-auto px-4">
        <div class="flex-1">
          <h1 class="text-2xl font-bold flex items-center">
            <i class='bx bx-planet text-3xl text-primary mr-2'></i>
            <span class="text-transparent bg-clip-text bg-gradient-to-r from-primary to-secondary">AQI Monitor</span>
          </h1>
        </div>
        <div class="flex-none">
          <span class="badge badge-outline">{{ currentData.deviceData?.name || deviceId }}</span>
          <button @click="refreshData" class="btn btn-square btn-ghost ml-2">
            <i class='bx bx-refresh text-lg'></i>
          </button>
        </div>
      </div>
    </div>
    <div class="container mx-auto px-4 pb-8">
      <!-- Main Stats -->
      <div class="flex flex-col space-y-4 lg:flex-row lg:space-y-0 lg:space-x-4 mb-6">
        <!-- Current AQI -->
        <div class="card w-full lg:w-1/3 glass shadow-xl overflow-hidden">
          <div class="absolute inset-0 bg-gradient-to-br opacity-30" :class="{
              'from-green-500 to-green-700': aqiLevel === 'Good',
              'from-yellow-500 to-yellow-700': aqiLevel === 'Moderate',
              'from-orange-500 to-orange-700': aqiLevel === 'Unhealthy for Sensitive Groups',
              'from-red-500 to-red-700': aqiLevel === 'Unhealthy',
              'from-purple-500 to-purple-700': aqiLevel === 'Very Unhealthy',
              'from-rose-700 to-rose-900': aqiLevel === 'Hazardous'
            }">
          </div>
          <div class="card-body z-10 p-6 flex flex-col items-center justify-center">
            <div class="radial-progress text-5xl font-bold"
              :style="`--value:${Math.min(calculateAQI() / 5, 100)}; --size:12rem; --thickness: 1rem;`"
              :class="aqiColorClass">
              {{ calculateAQI() }}
            </div>
            <div class="mt-4 text-center">
              <div class="text-xl font-bold" :class="aqiColorClass">{{ aqiStatus }}</div>
              <div class="badge badge-lg mt-2" :class="aqiStatusBadgeClass">{{ aqiLevel }}</div>
            </div>
            <div class="text-sm text-base-content/70 mt-2">Updated: {{ formatTime(currentData.updatedAt) }}</div>
          </div>
        </div>

        <!-- Charts -->
        <div class="card w-full lg:w-2/3 bg-base-100 shadow-xl">
          <div class="card-body p-6">
            <div class="tabs tabs-boxed mb-4">
              <a class="tab" :class="{ 'tab-active': activeTab === 'pm' }" @click="activeTab = 'pm'">PM Values</a>
              <a class="tab" :class="{ 'tab-active': activeTab === 'temp' }" @click="activeTab = 'temp'">Temperature &
                Humidity</a>
            </div>
            <div v-show="activeTab === 'pm'" class="h-64">
              <canvas id="pmChart"></canvas>
            </div>
            <div v-show="activeTab === 'temp'" class="h-64">
              <canvas id="thChart"></canvas>
            </div>
          </div>
        </div>
      </div>

      <!-- Current Readings -->
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4 mb-6">
        <div class="card bg-base-100 shadow-xl">
          <div class="card-body p-4 text-center">
            <div class="stat-title">Temperature</div>
            <div class="flex items-center justify-center my-2">
              <i class='bx bx-thermometer text-3xl text-orange-500'></i>
            </div>
            <div class="stat-value text-2xl">{{ currentData.temperature }}°C</div>
          </div>
        </div>
        <div class="card bg-base-100 shadow-xl">
          <div class="card-body p-4 text-center">
            <div class="stat-title">Humidity</div>
            <div class="flex items-center justify-center my-2">
              <i class='bx bx-droplet text-3xl text-blue-500'></i>
            </div>
            <div class="stat-value text-2xl">{{ currentData.humidity }}%</div>
          </div>
        </div>
        <div class="card bg-base-100 shadow-xl">
          <div class="card-body p-4 text-center">
            <div class="stat-title">PM 1.0</div>
            <div class="flex items-center justify-center my-2">
              <i class='bx bx-wind text-3xl text-slate-400'></i>
            </div>
            <div class="stat-value text-2xl">{{ currentData.pm1 }}</div>
            <div class="stat-desc">µg/m³</div>
          </div>
        </div>
        <div class="card bg-base-100 shadow-xl">
          <div class="card-body p-4 text-center">
            <div class="stat-title">PM 2.5</div>
            <div class="flex items-center justify-center my-2">
              <i class='bx bx-wind text-3xl text-slate-500'></i>
            </div>
            <div class="stat-value text-2xl">{{ currentData.pm25 }}</div>
            <div class="stat-desc">µg/m³</div>
          </div>
        </div>
        <div class="card bg-base-100 shadow-xl">
          <div class="card-body p-4 text-center">
            <div class="stat-title">PM 10</div>
            <div class="flex items-center justify-center my-2">
              <i class='bx bx-wind text-3xl text-slate-600'></i>
            </div>
            <div class="stat-value text-2xl">{{ currentData.pm10 }}</div>
            <div class="stat-desc">µg/m³</div>
          </div>
        </div>
      </div>

      <!-- Historical Data -->
      <div class="card bg-base-100 shadow-xl overflow-hidden">
        <div class="card-body p-0">
          <div class="bg-base-200 p-4">
            <h2 class="card-title text-base-content flex items-center">
              <i class='bx bx-history text-2xl mr-2'></i>
              Historical Data
            </h2>
          </div>
          <div class="overflow-x-auto">
            <table class="table table-zebra w-full">
              <thead>
                <tr>
                  <th>Time</th>
                  <th>PM 1.0</th>
                  <th>PM 2.5</th>
                  <th>PM 10</th>
                  <th>Temp</th>
                  <th>Humidity</th>
                  <th>AQI</th>
                </tr>
              </thead>
              <tbody>
                <tr v-for="(record, index) in historicalData" :key="index">
                  <td>{{ formatDate(record.createdAt) }}</td>
                  <td>{{ record.pm1 }} µg/m³</td>
                  <td>{{ record.pm25 }} µg/m³</td>
                  <td>{{ record.pm10 }} µg/m³</td>
                  <td>{{ record.temperature }}°C</td>
                  <td>{{ record.humidity }}%</td>
                  <td>
                    <div class="badge badge-lg" :class="getAqiBadgeClass(record)">
                      {{ calculateRecordAQI(record) }}
                    </div>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    const { createApp, ref, computed, onMounted, watch } = Vue;

    createApp({
      setup() {
        const devices = ref([]);
        const deviceId = ref('AQM-8742');
        const currentData = ref({
          deviceData: { name: 'Bangkok Station #3' },
          temperature: 32.5,
          humidity: 65,
          pm1: 15,
          pm25: 38,
          pm10: 49,
          createdAt: new Date(),
          updatedAt: new Date()
        });

        const historicalData = ref([]);
        const activeTab = ref('pm');
        let pmChart = null;
        let thChart = null;

        // Generate mock historical data
        const generateMockData = () => {
          const mockData = [];
          const now = new Date();

          for (let i = 0; i < 5; i++) {
            const pastTime = new Date(now.getTime() - (i + 1) * 3600000); // each hour back
            mockData.push({
              deviceData: { name: 'Bangkok Station #3' },
              temperature: Math.round((30 + Math.random() * 5) * 10) / 10,
              humidity: Math.round(50 + Math.random() * 30),
              pm1: Math.round(10 + Math.random() * 20),
              pm25: Math.round(25 + Math.random() * 40),
              pm10: Math.round(35 + Math.random() * 40),
              createdAt: pastTime,
              updatedAt: pastTime
            });
          }

          return mockData;
        };

        const calculateAQI = () => {
          // Using PM2.5 as primary indicator, simplified calculation
          const pm25 = currentData.value.pm25;

          if (pm25 <= 12) return Math.round((50 / 12) * pm25);
          if (pm25 <= 35.4) return Math.round(50 + ((100 - 50) / (35.4 - 12)) * (pm25 - 12));
          if (pm25 <= 55.4) return Math.round(100 + ((150 - 100) / (55.4 - 35.4)) * (pm25 - 35.4));
          if (pm25 <= 150.4) return Math.round(150 + ((200 - 150) / (150.4 - 55.4)) * (pm25 - 55.4));
          if (pm25 <= 250.4) return Math.round(200 + ((300 - 200) / (250.4 - 150.4)) * (pm25 - 150.4));
          if (pm25 <= 350.4) return Math.round(300 + ((400 - 300) / (350.4 - 250.4)) * (pm25 - 250.4));
          return Math.round(400 + ((500 - 400) / (500.4 - 350.4)) * (pm25 - 350.4));
        };

        const calculateRecordAQI = (record) => {
          const pm25 = record.pm25;

          if (pm25 <= 12) return Math.round((50 / 12) * pm25);
          if (pm25 <= 35.4) return Math.round(50 + ((100 - 50) / (35.4 - 12)) * (pm25 - 12));
          if (pm25 <= 55.4) return Math.round(100 + ((150 - 100) / (55.4 - 35.4)) * (pm25 - 35.4));
          if (pm25 <= 150.4) return Math.round(150 + ((200 - 150) / (150.4 - 55.4)) * (pm25 - 55.4));
          if (pm25 <= 250.4) return Math.round(200 + ((300 - 200) / (250.4 - 150.4)) * (pm25 - 150.4));
          if (pm25 <= 350.4) return Math.round(300 + ((400 - 300) / (350.4 - 250.4)) * (pm25 - 250.4));
          return Math.round(400 + ((500 - 400) / (500.4 - 350.4)) * (pm25 - 350.4));
        };

        const aqiLevel = computed(() => {
          const aqi = calculateAQI();
          if (aqi <= 50) return 'Good';
          if (aqi <= 100) return 'Moderate';
          if (aqi <= 150) return 'Unhealthy for Sensitive Groups';
          if (aqi <= 200) return 'Unhealthy';
          if (aqi <= 300) return 'Very Unhealthy';
          return 'Hazardous';
        });

        const aqiStatus = computed(() => {
          const aqi = calculateAQI();
          if (aqi <= 50) return 'Good';
          if (aqi <= 100) return 'Moderate';
          if (aqi <= 150) return 'Unhealthy (Sensitive)';
          if (aqi <= 200) return 'Unhealthy';
          if (aqi <= 300) return 'Very Unhealthy';
          return 'Hazardous';
        });

        const aqiColorClass = computed(() => {
          const aqi = calculateAQI();
          if (aqi <= 50) return 'text-success';
          if (aqi <= 100) return 'text-warning';
          if (aqi <= 150) return 'text-orange-500';
          if (aqi <= 200) return 'text-error';
          if (aqi <= 300) return 'text-purple-700';
          return 'text-rose-700';
        });

        const aqiStatusBadgeClass = computed(() => {
          const aqi = calculateAQI();
          if (aqi <= 50) return 'badge-success';
          if (aqi <= 100) return 'badge-warning';
          if (aqi <= 150) return 'badge-warning';
          if (aqi <= 200) return 'badge-error';
          if (aqi <= 300) return 'badge-error';
          return 'badge-error';
        });

        const getAqiBadgeClass = (record) => {
          const aqi = calculateRecordAQI(record);
          if (aqi <= 50) return 'badge-success';
          if (aqi <= 100) return 'badge-warning';
          if (aqi <= 150) return 'badge-warning';
          if (aqi <= 200) return 'badge-error';
          if (aqi <= 300) return 'badge-error';
          return 'badge-error';
        };

        const formatDate = (date) => {
          const d = new Date(date);
          return `${d.toLocaleDateString()} ${d.getHours()}:${d.getMinutes().toString().padStart(2, '0')}`;
        };

        const formatTime = (date) => {
          const d = new Date(date);
          return `${d.getHours()}:${d.getMinutes().toString().padStart(2, '0')}`;
        };

        const refreshData = () => {
          // Simulate data refresh
          currentData.value = {
            deviceData: { name: 'Bangkok Station #3' },
            temperature: Math.round((30 + Math.random() * 5) * 10) / 10,
            humidity: Math.round(50 + Math.random() * 30),
            pm1: Math.round(10 + Math.random() * 20),
            pm25: Math.round(25 + Math.random() * 40),
            pm10: Math.round(35 + Math.random() * 40),
            createdAt: new Date(),
            updatedAt: new Date()
          };

          // Add current data to history and keep only 5 records
          historicalData.value.unshift({ ...currentData.value });
          if (historicalData.value.length > 5) {
            historicalData.value = historicalData.value.slice(0, 5);
          }

          // Update charts
          updateCharts();

          Swal.fire({
            position: 'top-end',
            icon: 'success',
            title: 'Data refreshed',
            showConfirmButton: false,
            timer: 1500,
            background: '#2A303C',
            iconColor: '#36D399',
            color: '#A6ADBB'
          });
        };

        

        const initCharts = () => {
          const ctx1 = document.getElementById('pmChart');
          const ctx2 = document.getElementById('thChart');

          // Combine current data with historical data for charts
          const allData = [currentData.value, ...historicalData.value].reverse();
          const labels = allData.map(d => formatTime(d.createdAt));

          pmChart = new Chart(ctx1, {
            type: 'line',
            data: {
              labels: labels,
              datasets: [
                {
                  label: 'PM 1.0',
                  data: allData.map(d => d.pm1),
                  borderColor: 'rgba(156, 163, 175, 1)',
                  backgroundColor: 'rgba(156, 163, 175, 0.2)',
                  tension: 0.4,
                  fill: true
                },
                {
                  label: 'PM 2.5',
                  data: allData.map(d => d.pm25),
                  borderColor: 'rgba(96, 165, 250, 1)',
                  backgroundColor: 'rgba(96, 165, 250, 0.2)',
                  tension: 0.4,
                  fill: true
                },
                {
                  label: 'PM 10',
                  data: allData.map(d => d.pm10),
                  borderColor: 'rgba(14, 116, 144, 1)',
                  backgroundColor: 'rgba(14, 116, 144, 0.2)',
                  tension: 0.4,
                  fill: true
                }
              ]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  position: 'top',
                },
                tooltip: {
                  mode: 'index',
                  intersect: false,
                }
              },
              scales: {
                y: {
                  beginAtZero: true,
                  title: {
                    display: true,
                    text: 'µg/m³'
                  }
                }
              }
            }
          });

          thChart = new Chart(ctx2, {
            type: 'line',
            data: {
              labels: labels,
              datasets: [
                {
                  label: 'Temperature (°C)',
                  data: allData.map(d => d.temperature),
                  borderColor: 'rgba(239, 68, 68, 1)',
                  backgroundColor: 'rgba(239, 68, 68, 0.2)',
                  tension: 0.4,
                  fill: true,
                  yAxisID: 'y'
                },
                {
                  label: 'Humidity (%)',
                  data: allData.map(d => d.humidity),
                  borderColor: 'rgba(59, 130, 246, 1)',
                  backgroundColor: 'rgba(59, 130, 246, 0.2)',
                  tension: 0.4,
                  fill: true,
                  yAxisID: 'y1'
                }
              ]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  position: 'top',
                },
                tooltip: {
                  mode: 'index',
                  intersect: false
                }
              },
              scales: {
                y: {
                  type: 'linear',
                  display: true,
                  position: 'left',
                  title: {
                    display: true,
                    text: 'Temperature (°C)'
                  }
                },
                y1: {
                  type: 'linear',
                  display: true,
                  position: 'right',
                  grid: {
                    drawOnChartArea: false,
                  },
                  title: {
                    display: true,
                    text: 'Humidity (%)'
                  }
                }
              }
            }
          });
        };

        const updateCharts = () => {
          if (!pmChart || !thChart) return;

          const allData = [currentData.value, ...historicalData.value].reverse();
          const labels = allData.map(d => formatTime(d.createdAt));

          pmChart.data.labels = labels;
          pmChart.data.datasets[0].data = allData.map(d => d.pm1);
          pmChart.data.datasets[1].data = allData.map(d => d.pm25);
          pmChart.data.datasets[2].data = allData.map(d => d.pm10);
          pmChart.update();

          thChart.data.labels = labels;
          thChart.data.datasets[0].data = allData.map(d => d.temperature);
          thChart.data.datasets[1].data = allData.map(d => d.humidity);
          thChart.update();
        };

        watch(activeTab, () => {
          setTimeout(() => {
            updateCharts();
          }, 100);
        });

        const loadDevices = async () => {
          try {
            const response = await axios.get('/api/device');
            devices.value = response.data.data;
            deviceId.value = devices.value[0]._id;
          } catch (error) {
            console.error(error);
          }
        };

        const loadData = async () => {
          try {
            const response = await axios.get(`/api/device/${deviceId.value}`);
            currentData.value = response.data.data;
            historicalData.value = response.data.data;
            initCharts();
          } catch (error) {
            console.error(error);
          }
        }

        onMounted( () => {
           loadDevices();
          // Initialize with mock data
          historicalData.value = generateMockData();

          initCharts();

        });

        return {
          devices,
          deviceId,
          currentData,
          historicalData,
          activeTab,
          calculateAQI,
          calculateRecordAQI,
          aqiLevel,
          aqiStatus,
          aqiColorClass,
          aqiStatusBadgeClass,
          getAqiBadgeClass,
          formatDate,
          formatTime,
          refreshData
        };
      }
    }).mount('#app');
  </script>
</body>

</html>
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <link href="https://cdn.jsdelivr.net/npm/daisyui@4.12.24/dist/full.min.css" rel="stylesheet" type="text/css" />
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
</head>

<body>
  <main id="app">
    <dialog id="my_modal_1" class="modal">
      <div class="modal-box min-w-96">
        <form method="dialog">
          <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">âœ•</button>
        </form>
        <div class="pt-8">
          <form @submit="createDevice">
            <input type="text" placeholder="Device name" v-model="name" class="input input-bordered w-full mb-3"
              required />
            <input type="text" placeholder="Device name" v-model="location" class="input input-bordered w-full "
              required />
            <button type="submit" class="btn btn-primary w-full mt-4">Add</button>
          </form>
        </div>
      </div>
    </dialog>
    <div class="drawer lg:drawer-open">
      <input id="my-drawer-2" type="checkbox" class="drawer-toggle" />
      <div class="drawer-content">
        <!-- Page content here -->
        <div class="navbar bg-base-100">
          <div class="flex-none">
            <label for="my-drawer-2" class="btn btn-primary drawer-button lg:hidden">
              <i class='bx bx-menu-alt-left'></i>
            </label>
          </div>
          <div class="flex-1">
            <a class="btn btn-ghost text-xl">Admin</a>
          </div>
          <div class="flex-none">
            <button class="btn btn-square btn-ghost">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                class="inline-block h-5 w-5 stroke-current">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z">
                </path>
              </svg>
            </button>
          </div>
        </div>
        <div class="card">
          <div class="card-body">
            <div class="card-title flex justify-between">
              <h1>Devices</h1>
              <div class="card-actions">
                <button class="btn btn-primary" onclick="my_modal_1.showModal()">Add New</button>
              </div>
            </div>
            <div class="overflow-x-auto">
              <table class="table">
                <!-- head -->
                <thead>
                  <tr>
                    <th></th>
                    <th>Name</th>
                    <th>Job</th>
                    <th>Favorite Color</th>
                  </tr>
                </thead>
                <tbody>
                  <tr v-for="(device, index) in devices" :key="index">
                    <th>[{index+1}]</th>
                    <td>[{device._id}]</td>
                    <td>[{device.name}]</td>
                    <td>[{device.location}]</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
      <div class="drawer-side">
        <label for="my-drawer-2" aria-label="close sidebar" class="drawer-overlay"></label>
        <ul class="menu bg-base-200 text-base-content min-h-full w-80 p-4">
          <!-- Sidebar content here -->
          <li><a>Devices</a></li>
        </ul>
      </div>
    </div>
  </main>
  <script>
    // Vue.js code here
    const { createApp } = Vue;
    const app = createApp({
      delimiters: ["[{", "}]"],
      data() {
        return {
          name: '',
          location: '',
          devices: []
        };
      },
      async mounted() {
        const response = await axios.get('/api/device');
        this.devices = response.data.data;
      },
      methods: {
        createDevice: async function (e) {
          e.preventDefault();
          try {
            const response = await axios.post('/api/device', {
              name: this.name,
              location: this.location
            });
            document.getElementById('my_modal_1').close();
            Swal.fire({
              title: 'Success!',
              text: response.data.message,
              icon: 'success',
            });
          } catch (error) {
            console.error(error);
          }
          finally {
            const response = await axios.get('/api/device');
            this.devices = response.data.data;
          }
        }
      },
    });
    app.mount('#app');
  </script>
</body>

</html>